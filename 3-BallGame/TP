float circleX;
float circleY;
float speedX = 1;
int rectheight = 30;
int rects = 7;

float[] tabRectX = new float[rects];
float[] tabRectY = new float[rects];
float[] rectSpeed = new float[rects];

boolean wins = false;
boolean lost = false;

void setup()
{
  size(600, 400);
  circleX = 0;
  circleY = height/2;
  initRects();
  
}

void draw(){
  background(25);
  fill(255);
  stroke(30);
  do{
    drawRects();
  
  ellipse(circleX, circleY, 10, 10);
  
  // UPDATE
  moveRects();
  circleX  =circleX + speedX;
  
  if(cirlceHitsWall())
  {
    winGame();
  }
  
  if(circleHitsRect())
  {
    lostGame();
  }
  
  goBackIfItHitsTheWall();
  
  }while(isTheEnd());
  
  
}

void bounce()
{
  speedX = speedX * (-1);
}

boolean cirlceHitsWall()
{
  return circleX >= width;
}

void winGame()
{
  wins = true;
}

void lostGame()
{
  lost = true;
}

void moveRects()
{
  for(int i=0 ; i < rects; i++)
  {
    tabRectY[i] = tabRectY[i] + rectSpeed[i];
  }
  
}

void goBackIfItHitsTheWall()
{
    for(int i=0 ; i < rects; i++)
    {
       if(tabRectY[i] >= (height - rectheight) || tabRectY[i] <=0)
       {
         goBack(i);
       }
    }

}

void goBack(int i)
{
  rectSpeed[i] = rectSpeed[i] * (-1);
}

void initRects()
{
  float from = 10;
  for(int i=0; i < rects; i++){
      tabRectX[i] = random(0, width);
      tabRectY[i] = 0;
      rectSpeed[i] = random(0.5, 1.3);
      from = tabRectX[i];
  }
}

void drawRects()
{
  for(int i=0 ; i < rects; i++){
    rect(tabRectX[i], tabRectY[i], 5, rectheight);
  }
}

boolean isTheEnd()
{
  return wins || lost;
}

boolean circleHitsRect()
{
      for(int i=0 ; i < rects; i++)
      {
         if((int)circleX == (int)tabRectX[i])
         {
           
           if(((int)circleY >= (int)tabRectY[i] &&  (int)circleY< (int)(tabRectY[i] + rectheight)))
             return true;
         }
      }
      
      return false;

}
